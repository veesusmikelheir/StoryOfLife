package net.nolifers.storyoflife.event;

import net.minecraft.block.Block;
import net.minecraft.client.audio.Sound;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntitySpawnPlacementRegistry;
import net.minecraft.entity.EnumCreatureType;
import net.minecraft.init.Biomes;
import net.minecraft.util.SoundEvent;
import net.minecraft.world.biome.Biome;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.registry.EntityEntry;
import net.minecraftforge.fml.common.registry.EntityEntryBuilder;
import net.minecraftforge.fml.common.registry.ForgeRegistries;
import net.nolifers.storyoflife.StoryofLife;
import net.nolifers.storyoflife.entity.*;
import net.nolifers.storyoflife.init.ModSounds;

/**
 * This is a special class that listens to registry events, to allow creation of mod blocks and items at the proper time.
 * Code auto generated by Minecraft Dev plugin for IntelliJ IDEA :
 */
@Mod.EventBusSubscriber(modid=StoryofLife.MOD_ID)
public class RegistryEventHandler {
    /**
     * Listen for the register event for creating custom items
     */
    @SubscribeEvent
    public static void addItems(RegistryEvent.Register<Item> event) {

    }

    /**
     * Listen for the register event for creating custom blocks
     */
    @SubscribeEvent
    public static void addBlocks(RegistryEvent.Register<Block> event) {

    }

    @SubscribeEvent
    public static void addEntities(RegistryEvent.Register<EntityEntry> event){
        int EntityID= 0;
        event.getRegistry().registerAll(
                EntityEntryBuilder.create()
                .entity(EntityWildebeest.class)
                .id(new ResourceLocation(StoryofLife.MOD_ID,"wildebeest"),EntityID++)
                .name(StoryofLife.MOD_ID+".wildebeest")
                .tracker(64,3,true)
                .egg(0,0).
                        spawn(EnumCreatureType.CREATURE,14,5,8, new Biome[]{Biomes.SAVANNA,Biomes.MUTATED_SAVANNA,Biomes.SAVANNA_PLATEAU})
                .build(),
                EntityEntryBuilder.create()
                .entity(EntityJellyfish.class)
                .id(new ResourceLocation(StoryofLife.MOD_ID,"jellyfish"),EntityID++)
                .name(StoryofLife.MOD_ID+".jellyfish")
                .tracker(32,3,true)
                .egg(0,0)
                .spawn(EnumCreatureType.WATER_CREATURE,3,1,3,Biomes.DEEP_OCEAN)

                .build(),
                EntityEntryBuilder.create()
                .entity(EntitySmallSnake.class)
                .id(new ResourceLocation(StoryofLife.MOD_ID,"smallsnake"),EntityID++)
                .name(StoryofLife.MOD_ID+".smallsnake")
                .tracker(48,3,true)
                .egg(0,0)
                .spawn(EnumCreatureType.CREATURE,15,2,4,Biomes.SAVANNA,Biomes.SAVANNA_PLATEAU,Biomes.MUTATED_SAVANNA,Biomes.PLAINS,Biomes.MUTATED_PLAINS)
                .build(),
                EntityEntryBuilder.create()
                        .entity(EntityFrog.class)
                        .id(new ResourceLocation(StoryofLife.MOD_ID,"frog"),EntityID++)
                        .name(StoryofLife.MOD_ID+".frog")
                        .tracker(48,2,true)
                        .egg(0,0)
                        .build(),
                EntityEntryBuilder.create().
                entity(EntityThornyLizard.class)
                .id(new ResourceLocation(StoryofLife.MOD_ID,"thornylizard"),EntityID++)
                .name(StoryofLife.MOD_ID+".thornylizard")
                .tracker(48,3,true)
                .egg(0,0)
                .spawn(EnumCreatureType.CREATURE,4,2,4,Biomes.DESERT,Biomes.DESERT_HILLS,Biomes.MUTATED_DESERT)
                .build()
        );
        EntitySpawnPlacementRegistry.setPlacementType(EntityJellyfish.class, EntityLiving.SpawnPlacementType.IN_WATER);
    }


    @SubscribeEvent
    public static void missingMappingsEntity(RegistryEvent.MissingMappings<EntityEntry> event){
        for(RegistryEvent.MissingMappings.Mapping mapping : event.getMappings()){
            if(mapping.key.toString().equals("storyoflife:wildebeast")){
                mapping.remap(ForgeRegistries.ENTITIES.getValue(new ResourceLocation(StoryofLife.MOD_ID,"wildebeest")));
            }
        }
    }

    @SubscribeEvent
    public static void missingMappingsSounds(RegistryEvent.MissingMappings<SoundEvent> event){
        for(RegistryEvent.MissingMappings.Mapping mapping : event.getMappings()){
            if(mapping.key.toString().equals("storyoflife:wildebeast_ambient")){
                mapping.remap(ModSounds.WILDEBEEST_AMBIENT);
            }
        }
    }
    @SubscribeEvent
    public static void addSounds(RegistryEvent.Register<SoundEvent> event){

        ForgeRegistries.SOUND_EVENTS.registerAll(
            createSoundEvent("wildebeest_ambient")
        );
    }

    static ItemBlock createBasicItemBlock(Block b){
        return (ItemBlock)(new ItemBlock(b).setRegistryName(b.getRegistryName()));
    }

    static SoundEvent createSoundEvent(String name){
        return new SoundEvent(new ResourceLocation(StoryofLife.MOD_ID,name)).setRegistryName(StoryofLife.MOD_ID,name);
    }

}